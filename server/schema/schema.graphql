# scalar Date

type Query {
    currentUser: User
    user(id: ID!): User!
    users: [User!]!
    requisition(id: ID!): Requisition!
    requisitions: [Requisition!]!
    stock(id: ID!): Stock!
    stocks: [Stock!]!
}

type Mutation {
    logout: User
    login(username: String!, password: String! ): User!
    createUser(data: CreateUserInput!): User!
    editUser(data: EditUserInput!, id: ID!): User!
    deleteUser(id: ID!): User!
    createRequisition(data: CreateRequisitionInput!): Requisition!
    editRequisition(data: EditRequisitionInput!, id: ID!): Requisition!
    deleteRequisition(id: ID!): Requisition!
    createStock(data: CreateStockInput!): Stock!
    editStock(data: EditStockInput! id: ID!): Stock!
    deleteStock(id: ID!): Stock!
}

input LoginUserInput {
    username: String!
    password: String!
}

input CreateUserInput {
    name: String!
    role: String!
    username: String!
    password: String!
}

input EditUserInput {
    name: String
    role: String
    username: String
    password: String
}

input CreateRequisitionInput {
    name: String!
    role: String
    item: ID!
    returnDate: String!
}

input EditRequisitionInput {
    role: String
    returnDate: String
    actualReturnDate: String
}

input CreateStockInput {
    name: String!
    quantity: Int!
    numberInStock: Int
}

input EditStockInput {
    quantity: Int
    numberInStock: Int
}

type Requisition {
    _id: ID!
    name: String!
    role: String
    item: Stock!
    date: String!
    returnDate: String!
    actualReturnDate: String
}

type Stock {
    _id: ID!
    name: String!
    quantity: Int!
    numberInStock: Int!
    requisitionHistory: [Requisition!]!
}

type User {
    _id: ID!
    name: String!
    role: String!
    username: String!
}